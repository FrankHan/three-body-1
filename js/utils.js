////////////////////////////////////////////////////////////////////////////////
// utils
// functions not fit in other places
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// log
////////////////////////////////////////////////////////////////////////////////

function log(msg) {
    setTimeout(function() {
        throw new Error(msg);
    }, 0);
}

////////////////////////////////////////////////////////////////////////////////
// randRange
// returns a number between [min, max)
////////////////////////////////////////////////////////////////////////////////

function randRange(min, max)
{
  return Math.random() * (max - min) + min;
}

////////////////////////////////////////////////////////////////////////////////
// randVector3
// returns a Vector3 with randomized xyz
////////////////////////////////////////////////////////////////////////////////

function randVector3(min, max)
{
  return new THREE.Vector3(randRange(min, max), randRange(min, max), randRange(min, max));
}

////////////////////////////////////////////////////////////////////////////////
// addRandFactor
////////////////////////////////////////////////////////////////////////////////

THREE.Vector3.prototype.addRandFactor = function(factor)
{
  var range = this.length() * factor;
  this.add(randVector3(-range, range));
}

////////////////////////////////////////////////////////////////////////////////
// get a perpendicular vector
////////////////////////////////////////////////////////////////////////////////

function getPerpendicular(vector)
{
  var result = new THREE.Vector3();
  result.crossVectors(vector, new THREE.Vector3(0, 1, 0));
  if (result.lengthSq() == 0)
    result.crossVectors(vector, new THREE.Vector3(0, 0, 1)); // try a different axis
  return result;
}